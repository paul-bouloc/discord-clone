// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ImageType {
  JPG
  JPEG
  PNG
  WEBP
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  username String
  email String @unique
  password String

  avatar_data Bytes?
  avatar_type ImageType?

  serversOwned Server[]
  serversJoined Member[]
  
  groupsOwned Group[]
  groupsJoined GroupMember[]

  messages Message[] @relation("author")

  directMessagesReceived Message[] @relation("directMessageReceiver")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  banner_data Bytes?
  banner_type ImageType?

  inviteCode String @unique @default(cuid()) 

  ownerId String @db.ObjectId
  owner User @relation(fields: [ownerId], references: [id])

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  MODERATOR
  USER
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id])

  role MemberRole @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  type ChannelType

  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id])

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String

  image_data Bytes?
  image_type ImageType?

  channelId String? @db.ObjectId
  channel Channel? @relation(fields: [channelId], references: [id])

  groupId String? @db.ObjectId
  group Group? @relation(fields: [groupId], references: [id])

  directMessageReceiverId String? @db.ObjectId
  directMessageReceiver User? @relation(fields: [directMessageReceiverId], references: [id], name: "directMessageReceiver")

  authorId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id], name: "author")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String

  ownerId String @db.ObjectId
  owner User @relation(fields: [ownerId], references: [id])

  members GroupMember[]

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMember {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])

  groupId String @db.ObjectId
  group Group @relation(fields: [groupId], references: [id])
}